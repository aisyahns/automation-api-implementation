{
  "stats": {
    "suites": 11,
    "tests": 51,
    "passes": 51,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-28T06:25:02.539Z",
    "end": "2023-03-28T06:27:44.068Z",
    "duration": 161529,
    "testsRegistered": 51,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "05b27648-7ef8-43d7-8144-972ecf6785a1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8165d2e5-047e-484e-9f29-f2fd3037613f",
          "title": "Test Register",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Login the registered user in \"Test Register\"",
              "fullTitle": "Test Register \"after all\" hook: Login the registered user in \"Test Register\"",
              "timedOut": false,
              "duration": 1394,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request({ userName: username },\n    function(err, res){\n        expect(res.status).to.equal(200);\n        token = res.body.token;\n        done();\n    })",
              "err": {},
              "uuid": "58c7b270-f438-45a4-8bfa-1a9a5f091fc9",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after all\" hook: Delete the registered user in \"Test Register\"",
              "fullTitle": "Test Register \"after all\" hook: Delete the registered user in \"Test Register\"",
              "timedOut": false,
              "duration": 1847,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesDeleteUser().request(userId, token,\n    function(err, res){\n        expect(res.status).to.equal(204);\n        done();\n    })",
              "err": {},
              "uuid": "06aff022-fba2-4204-baab-facb4609d7b3",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Failed: Username and password null",
              "fullTitle": "Test Register Failed: Username and password null",
              "timedOut": false,
              "duration": 1008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "9bddbf0d-e963-47f4-b269-9f0777bb4e42",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Username null",
              "fullTitle": "Test Register Failed: Username null",
              "timedOut": false,
              "duration": 2242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "889f9fff-9ec5-47bb-b624-0b9c84ccd73d",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password null",
              "fullTitle": "Test Register Failed: Password null",
              "timedOut": false,
              "duration": 816,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "a27b484f-f6fe-4fa1-a8fb-96e08f0bc93a",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password without special character",
              "fullTitle": "Test Register Failed: Password without special character",
              "timedOut": false,
              "duration": 3947,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "e18839bd-2c28-4c3c-ab48-5b4199594526",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password without number",
              "fullTitle": "Test Register Failed: Password without number",
              "timedOut": false,
              "duration": 838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "ca9d21ea-b7b1-43ac-bd43-756a47d15d4a",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password without alphabet",
              "fullTitle": "Test Register Failed: Password without alphabet",
              "timedOut": false,
              "duration": 2586,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "43c6deee-c105-4035-a1e4-c505d4d8ef15",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password without uppercase",
              "fullTitle": "Test Register Failed: Password without uppercase",
              "timedOut": false,
              "duration": 2763,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "843496c8-1c86-4a5d-b163-d870efd3db0c",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password without lowercase",
              "fullTitle": "Test Register Failed: Password without lowercase",
              "timedOut": false,
              "duration": 6111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "28f470ef-501a-47e4-8673-8e301c6facab",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password less than 8 char",
              "fullTitle": "Test Register Failed: Password less than 8 char",
              "timedOut": false,
              "duration": 2458,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "2fc2c2f9-35e1-4244-b40c-877458628ca5",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: User exist",
              "fullTitle": "Test Register Failed: User exist",
              "timedOut": false,
              "duration": 1408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.contain(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "49e9a907-3c15-43b5-988b-c5136de5af45",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success register new account",
              "fullTitle": "Test Register Success register new account",
              "timedOut": false,
              "duration": 966,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = new helper().randomUsername()\nnew pages().request( { userName: username },\n    function(err, res){\n        expect(res.status).to.equals(201);\n        expect(res.body.username).to.equal(username)\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        userId = res.body.userID;\n        done();\n    })",
              "err": {},
              "uuid": "e89d4120-d824-4afa-a8d5-b09032be125e",
              "parentUUID": "8165d2e5-047e-484e-9f29-f2fd3037613f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bddbf0d-e963-47f4-b269-9f0777bb4e42",
            "889f9fff-9ec5-47bb-b624-0b9c84ccd73d",
            "a27b484f-f6fe-4fa1-a8fb-96e08f0bc93a",
            "e18839bd-2c28-4c3c-ab48-5b4199594526",
            "ca9d21ea-b7b1-43ac-bd43-756a47d15d4a",
            "43c6deee-c105-4035-a1e4-c505d4d8ef15",
            "843496c8-1c86-4a5d-b163-d870efd3db0c",
            "28f470ef-501a-47e4-8673-8e301c6facab",
            "2fc2c2f9-35e1-4244-b40c-877458628ca5",
            "49e9a907-3c15-43b5-988b-c5136de5af45",
            "e89d4120-d824-4afa-a8d5-b09032be125e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b057b74a-90e5-4940-8ffa-9f9e9d2b9f67",
          "title": "Test Check Token",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Failed: Password null",
              "fullTitle": "Test Check Token Failed: Password null",
              "timedOut": false,
              "duration": 3814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals('UserName and Password required.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "9fa0188a-d346-45a3-9e5e-d2fd09423aa0",
              "parentUUID": "b057b74a-90e5-4940-8ffa-9f9e9d2b9f67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Username null",
              "fullTitle": "Test Check Token Failed: Username null",
              "timedOut": false,
              "duration": 1187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals('UserName and Password required.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "aa05dcbf-4014-40f0-bf24-e6b6f6960da9",
              "parentUUID": "b057b74a-90e5-4940-8ffa-9f9e9d2b9f67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Username and password null",
              "fullTitle": "Test Check Token Failed: Username and password null",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals('UserName and Password required.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "70c06f7b-6ec5-49e1-8fb8-4ff6b073416b",
              "parentUUID": "b057b74a-90e5-4940-8ffa-9f9e9d2b9f67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: User unregistered",
              "fullTitle": "Test Check Token Failed: User unregistered",
              "timedOut": false,
              "duration": 2207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request({ userName: \"aaaa\"}, \n    function (err, res) {\n        expect(res.status).to.equals(404);\n        expect(res.body.message).to.equals('User not found!');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "5cfd3fd6-03fd-4ae5-aea2-13b175f8b2b6",
              "parentUUID": "b057b74a-90e5-4940-8ffa-9f9e9d2b9f67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success: User registered",
              "fullTitle": "Test Check Token Success: User registered",
              "timedOut": false,
              "duration": 3861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(\n    function (err, res) {\n        expect(res.status).to.equals(200);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "e01c0d66-ab29-4cd9-95f0-eb61d61469d2",
              "parentUUID": "b057b74a-90e5-4940-8ffa-9f9e9d2b9f67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9fa0188a-d346-45a3-9e5e-d2fd09423aa0",
            "aa05dcbf-4014-40f0-bf24-e6b6f6960da9",
            "70c06f7b-6ec5-49e1-8fb8-4ff6b073416b",
            "5cfd3fd6-03fd-4ae5-aea2-13b175f8b2b6",
            "e01c0d66-ab29-4cd9-95f0-eb61d61469d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12293,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9650c060-fe27-4c82-8a0c-6f6f10840453",
          "title": "Test Login",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Failed: Username and password null",
              "fullTitle": "Test Login Failed: Username and password null",
              "timedOut": false,
              "duration": 1123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals('UserName and Password required.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('null'))\n        done();\n})",
              "err": {},
              "uuid": "7ca674e9-8a90-4f86-96d9-4efb3ae478e2",
              "parentUUID": "9650c060-fe27-4c82-8a0c-6f6f10840453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password null",
              "fullTitle": "Test Login Failed: Password null",
              "timedOut": false,
              "duration": 1202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals('UserName and Password required.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('null'))\n        done();\n})",
              "err": {},
              "uuid": "aadb43d3-c5b1-4525-a609-fd7c364ba19d",
              "parentUUID": "9650c060-fe27-4c82-8a0c-6f6f10840453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Username null",
              "fullTitle": "Test Login Failed: Username null",
              "timedOut": false,
              "duration": 1120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals('UserName and Password required.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('null'))\n        done();\n})",
              "err": {},
              "uuid": "5fcd7735-98dd-417a-a86c-6f5743d06510",
              "parentUUID": "9650c060-fe27-4c82-8a0c-6f6f10840453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: Password wrong",
              "fullTitle": "Test Login Failed: Password wrong",
              "timedOut": false,
              "duration": 1630,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.result).to.equals('User authorization failed.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "482e76fa-2a9d-4d38-86a7-44c533a0086c",
              "parentUUID": "9650c060-fe27-4c82-8a0c-6f6f10840453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: User unregistered",
              "fullTitle": "Test Login Failed: User unregistered",
              "timedOut": false,
              "duration": 995,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.result).to.equals('User authorization failed.');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "c46c2f0b-ac8a-42fb-8e15-c6cb6fdc7501",
              "parentUUID": "9650c060-fe27-4c82-8a0c-6f6f10840453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success login with valid account",
              "fullTitle": "Test Login Success login with valid account",
              "timedOut": false,
              "duration": 2754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body.result).to.equal('User authorized successfully.')\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n    })",
              "err": {},
              "uuid": "ed180d46-3af4-44c6-bc37-16732b17184a",
              "parentUUID": "9650c060-fe27-4c82-8a0c-6f6f10840453",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ca674e9-8a90-4f86-96d9-4efb3ae478e2",
            "aadb43d3-c5b1-4525-a609-fd7c364ba19d",
            "5fcd7735-98dd-417a-a86c-6f5743d06510",
            "482e76fa-2a9d-4d38-86a7-44c533a0086c",
            "c46c2f0b-ac8a-42fb-8e15-c6cb6fdc7501",
            "ed180d46-3af4-44c6-bc37-16732b17184a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8824,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "3969b3fa-2b52-4c54-b541-398f88650619",
          "title": "Test Get User by UserID",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test Get User by UserID\"",
              "fullTitle": "Test Get User by UserID \"before all\" hook in \"Test Get User by UserID\"",
              "timedOut": false,
              "duration": 4871,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request(\n    function(err, res){\n        expect(res.status).to.equals(200);\n        token = res.body.token\n        done();\n    })",
              "err": {},
              "uuid": "1466204b-f302-46c7-960b-39aee4072601",
              "parentUUID": "3969b3fa-2b52-4c54-b541-398f88650619",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success get detail user by valid id",
              "fullTitle": "Test Get User by UserID Success get detail user by valid id",
              "timedOut": false,
              "duration": 1897,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(userId, token,\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "c4048d25-5d4a-4c52-b0bd-c1544f98c080",
              "parentUUID": "3969b3fa-2b52-4c54-b541-398f88650619",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: get detail user with invalid id",
              "fullTitle": "Test Get User by UserID Failed: get detail user with invalid id",
              "timedOut": false,
              "duration": 1853,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request('aaaa', token,\n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body.message).to.equal('User not found!')\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "44d263d3-e698-4709-87d6-0042ecc105c5",
              "parentUUID": "3969b3fa-2b52-4c54-b541-398f88650619",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: get detail user with invalid token",
              "fullTitle": "Test Get User by UserID Failed: get detail user with invalid token",
              "timedOut": false,
              "duration": 1310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(userId, 'aaaa',\n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body.message).to.equal('User not authorized!')\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "fa825381-c387-4b37-873c-bc293a531e49",
              "parentUUID": "3969b3fa-2b52-4c54-b541-398f88650619",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4048d25-5d4a-4c52-b0bd-c1544f98c080",
            "44d263d3-e698-4709-87d6-0042ecc105c5",
            "fa825381-c387-4b37-873c-bc293a531e49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5060,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1f27155b-68f1-4429-947f-eaa0047282a6",
          "title": "Test Delete by UserID",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get user id to be deleted in \"Test Delete by UserID\"",
              "fullTitle": "Test Delete by UserID \"before all\" hook: Get user id to be deleted in \"Test Delete by UserID\"",
              "timedOut": false,
              "duration": 1624,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = new helper().randomUsername();\nnew pagesRegister().request({ userName: username },\n    function(err, res){\n        expect(res.status).to.equals(201);\n        userId = res.body.userID;\n        done();\n    }\n)",
              "err": {},
              "uuid": "740ed1db-a78e-4e43-9029-6e766d43f7c6",
              "parentUUID": "1f27155b-68f1-4429-947f-eaa0047282a6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Get token in \"Test Delete by UserID\"",
              "fullTitle": "Test Delete by UserID \"before all\" hook: Get token in \"Test Delete by UserID\"",
              "timedOut": false,
              "duration": 1264,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request({userName: username}, \n    function(err, res){\n        expect(res.status).to.equal(200);\n        token = res.body.token;\n        done();\n    })",
              "err": {},
              "uuid": "3815dbc6-5fb8-49b9-98ed-4d329dac42cc",
              "parentUUID": "1f27155b-68f1-4429-947f-eaa0047282a6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Failed: delete with invalid token",
              "fullTitle": "Test Delete by UserID Failed: delete with invalid token",
              "timedOut": false,
              "duration": 1008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(userId, 'aaaa',\n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body.message).to.equal('User not authorized!')\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "744766df-f54d-4cae-8256-b33f71c7c2cd",
              "parentUUID": "1f27155b-68f1-4429-947f-eaa0047282a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete valid user id",
              "fullTitle": "Test Delete by UserID Success delete valid user id",
              "timedOut": false,
              "duration": 982,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(userId, token,\n    (err, res) => {\n        expect(res.status).to.equals(204);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "20be2a26-06ba-47d0-81f7-fdb50101dc3b",
              "parentUUID": "1f27155b-68f1-4429-947f-eaa0047282a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: delete with invalid user id",
              "fullTitle": "Test Delete by UserID Failed: delete with invalid user id",
              "timedOut": false,
              "duration": 1455,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request('aaaa', token,\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body.message).to.equal('User Id not correct!')\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "26c13849-e5fb-4513-9649-69988a141de7",
              "parentUUID": "1f27155b-68f1-4429-947f-eaa0047282a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "744766df-f54d-4cae-8256-b33f71c7c2cd",
            "20be2a26-06ba-47d0-81f7-fdb50101dc3b",
            "26c13849-e5fb-4513-9649-69988a141de7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3445,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f18a563f-8a7f-40ed-943f-15fe9fe11cc7",
          "title": "Test Get Books",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success",
              "fullTitle": "Test Get Books Success",
              "timedOut": false,
              "duration": 864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request( \n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "8bc7d917-c6d7-4343-98c1-d4e5ae31e778",
              "parentUUID": "f18a563f-8a7f-40ed-943f-15fe9fe11cc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8bc7d917-c6d7-4343-98c1-d4e5ae31e778"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 864,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e4c91f17-762d-4987-8846-3b412647087c",
          "title": "Test Create Book",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get isbn in \"Test Create Book\"",
              "fullTitle": "Test Create Book \"before all\" hook: Get isbn in \"Test Create Book\"",
              "timedOut": false,
              "duration": 1884,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetBooks().request(\n    (err, res) => {\n        expect(res.status).to.equal(200)\n        isbn = res.body.books[0].isbn;\n        done();\n    }\n)",
              "err": {},
              "uuid": "760cc1cc-7414-48d8-a1cb-f95f61ea4130",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Get token in \"Test Create Book\"",
              "fullTitle": "Test Create Book \"before all\" hook: Get token in \"Test Create Book\"",
              "timedOut": false,
              "duration": 4298,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request(\n    (err, res) => {\n        expect(res.status).to.equal(200)\n        token = res.body.token;\n        done();\n    }\n)",
              "err": {},
              "uuid": "01e4ae6a-b513-4276-8a17-30ee96738441",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Delete book in \"Test Create Book\"",
              "fullTitle": "Test Create Book \"before all\" hook: Delete book in \"Test Create Book\"",
              "timedOut": false,
              "duration": 2543,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesDeleteBook().requestDefault(token,\n    (err, res) => {\n        expect(res.status).to.equals(204);\n        done();\n    }\n)",
              "err": {},
              "uuid": "ef035345-ec8f-4db9-9eb4-5eaf6f79995c",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Failed: user id null",
              "fullTitle": "Test Create Book Failed: user id null",
              "timedOut": false,
              "duration": 7362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "16984270-9402-45e0-926d-2bd4583e587a",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: isbn null",
              "fullTitle": "Test Create Book Failed: isbn null",
              "timedOut": false,
              "duration": 3844,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "f352cc5c-4d62-4774-bc5f-51b49a833f11",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: invalid isbn",
              "fullTitle": "Test Create Book Failed: invalid isbn",
              "timedOut": false,
              "duration": 1050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "46b5bd81-79c7-48f3-b45d-2ae899f2842e",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: invalid user id",
              "fullTitle": "Test Create Book Failed: invalid user id",
              "timedOut": false,
              "duration": 1040,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "ccac701a-c284-4d06-bb8e-50050379ab34",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: invalid token",
              "fullTitle": "Test Create Book Failed: invalid token",
              "timedOut": false,
              "duration": 978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request('aaaa', \n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body.message).to.equals('User not authorized!');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "b5aad742-f138-4c0c-854e-4b7462ad8eb0",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success create book with valid isbn",
              "fullTitle": "Test Create Book Success create book with valid isbn",
              "timedOut": false,
              "duration": 2180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, { isbn: isbn }, \n    (err, res) => {\n        expect(res.status).to.equals(201);\n        expect(res.body.books[0].isbn).to.equal(isbn);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "45a47095-a453-4d9a-9bb7-5f1d146ea170",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: create book that has been added",
              "fullTitle": "Test Create Book Failed: create book that has been added",
              "timedOut": false,
              "duration": 3547,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, { isbn: isbn}, \n    (err, res) => {\n        expect(res.status).to.equals(400);\n        expect(res.body.message).to.equals('ISBN already present in the User\\'s Collection!');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "244b0054-491d-415e-bfa5-f32a241fe397",
              "parentUUID": "e4c91f17-762d-4987-8846-3b412647087c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16984270-9402-45e0-926d-2bd4583e587a",
            "f352cc5c-4d62-4774-bc5f-51b49a833f11",
            "46b5bd81-79c7-48f3-b45d-2ae899f2842e",
            "ccac701a-c284-4d06-bb8e-50050379ab34",
            "b5aad742-f138-4c0c-854e-4b7462ad8eb0",
            "45a47095-a453-4d9a-9bb7-5f1d146ea170",
            "244b0054-491d-415e-bfa5-f32a241fe397"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20001,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "71d81deb-84dc-41d2-826e-0f91ff5d7a6b",
          "title": "Test Delete Books",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get token in \"Test Delete Books\"",
              "fullTitle": "Test Delete Books \"before all\" hook: Get token in \"Test Delete Books\"",
              "timedOut": false,
              "duration": 1324,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request(\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        token = res.body.token;\n        done();\n    }\n)",
              "err": {},
              "uuid": "cd735c88-1591-45c0-9702-68aca7a52707",
              "parentUUID": "71d81deb-84dc-41d2-826e-0f91ff5d7a6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Validate if the books is deleted in \"Test Delete Books\"",
              "fullTitle": "Test Delete Books \"after all\" hook: Validate if the books is deleted in \"Test Delete Books\"",
              "timedOut": false,
              "duration": 798,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetUserId().request(userId, token, \n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body.books).to.deep.equal([])\n        done();\n})",
              "err": {},
              "uuid": "e57fead9-4848-4403-9272-c4d60f25f221",
              "parentUUID": "71d81deb-84dc-41d2-826e-0f91ff5d7a6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Success delete books",
              "fullTitle": "Test Delete Books Success delete books",
              "timedOut": false,
              "duration": 1356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(userId, token, \n    (err, res) => {\n        expect(res.status).to.equals(204);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "fd3b214a-0683-453a-a254-a78c9abd3cb3",
              "parentUUID": "71d81deb-84dc-41d2-826e-0f91ff5d7a6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: delete books with invalid user id",
              "fullTitle": "Test Delete Books Failed: delete books with invalid user id",
              "timedOut": false,
              "duration": 3082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request('aaa', token, \n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "e0dc2943-a0e7-4c38-b477-106e0fd27f47",
              "parentUUID": "71d81deb-84dc-41d2-826e-0f91ff5d7a6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: delete books with invalid token",
              "fullTitle": "Test Delete Books Failed: delete books with invalid token",
              "timedOut": false,
              "duration": 1811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(userId, 'aaaa', \n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "631f0729-2c39-4edb-ae76-6ca78096f8d0",
              "parentUUID": "71d81deb-84dc-41d2-826e-0f91ff5d7a6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd3b214a-0683-453a-a254-a78c9abd3cb3",
            "e0dc2943-a0e7-4c38-b477-106e0fd27f47",
            "631f0729-2c39-4edb-ae76-6ca78096f8d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6249,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a81e37ea-26af-49a8-a9eb-2986da28124d",
          "title": "Test Get Book by ISBN",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test Get Book by ISBN\"",
              "fullTitle": "Test Get Book by ISBN \"before all\" hook in \"Test Get Book by ISBN\"",
              "timedOut": false,
              "duration": 2772,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetBooks().request(\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        isbn = res.body.books[0].isbn;\n        done();\n    }\n)",
              "err": {},
              "uuid": "d244464a-1e07-41f9-a320-1fe3f7e59881",
              "parentUUID": "a81e37ea-26af-49a8-a9eb-2986da28124d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success get book with valid isbn",
              "fullTitle": "Test Get Book by ISBN Success get book with valid isbn",
              "timedOut": false,
              "duration": 3797,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(isbn,\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body.isbn).to.equal(isbn)\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "79ccde6f-9ab2-43fa-aa38-69faf51f5b77",
              "parentUUID": "a81e37ea-26af-49a8-a9eb-2986da28124d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: get book with invalid isbn",
              "fullTitle": "Test Get Book by ISBN Failed: get book with invalid isbn",
              "timedOut": false,
              "duration": 4598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request('aaaa',\n    (err, res) => {\n        expect(res.status).to.equals(400);\n        expect(res.body.message).to.equal('ISBN supplied is not available in Books Collection!')\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "189043a3-3519-405e-b4b8-11fa4367fa4e",
              "parentUUID": "a81e37ea-26af-49a8-a9eb-2986da28124d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79ccde6f-9ab2-43fa-aa38-69faf51f5b77",
            "189043a3-3519-405e-b4b8-11fa4367fa4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8395,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
          "title": "Test Delete a Book",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get isbn in \"Test Delete a Book\"",
              "fullTitle": "Test Delete a Book \"before all\" hook: Get isbn in \"Test Delete a Book\"",
              "timedOut": false,
              "duration": 2502,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetBooks().request(\n    (err, res) => {\n        expect(res.status).to.equal(200)\n        isbn = res.body.books[0].isbn\n        isbn2 = res.body.books[1].isbn\n        done();\n    }\n)",
              "err": {},
              "uuid": "614b37fa-36e1-4d5f-be1b-deb9851d694d",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Get token in \"Test Delete a Book\"",
              "fullTitle": "Test Delete a Book \"before all\" hook: Get token in \"Test Delete a Book\"",
              "timedOut": false,
              "duration": 2413,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request(\n    (err, res) => {\n        expect(res.status).to.equal(200)\n        token = res.body.token\n        done();\n    }\n)",
              "err": {},
              "uuid": "77daf879-84ed-47de-8106-0cb2485be20d",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Delete book in \"Test Delete a Book\"",
              "fullTitle": "Test Delete a Book \"before all\" hook: Delete book in \"Test Delete a Book\"",
              "timedOut": false,
              "duration": 4174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesDeleteBook().request(userId, token,\n    (err, res) => {\n        expect(res.status).to.equals(204);\n        done();\n    }\n)",
              "err": {},
              "uuid": "60bd55d0-acec-4987-9917-b5c4e2db349c",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Create books in \"Test Delete a Book\"",
              "fullTitle": "Test Delete a Book \"before all\" hook: Create books in \"Test Delete a Book\"",
              "timedOut": false,
              "duration": 2394,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesCreateBook().request(token, { collectionOfIsbns: [ { isbn : isbn }, { isbn : isbn2 }]},\n    (err, res) => {\n        expect(res.status).to.equals(201);\n        done();\n    }\n)",
              "err": {},
              "uuid": "8b2fe1d7-34c1-4c63-8564-c53f1e49eb48",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Verify if the book is deleted in \"Test Delete a Book\"",
              "fullTitle": "Test Delete a Book \"after all\" hook: Verify if the book is deleted in \"Test Delete a Book\"",
              "timedOut": false,
              "duration": 889,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetDetailUser().request(userId, token,\n    (err, res) => {\n        expect(res.status).to.equal(200)\n        expect(new helper().getValues(res, 'books.isbn')).to.not.contain(isbn)\n        done();\n    }\n)",
              "err": {},
              "uuid": "70d6e42b-eb56-4bbc-9df2-54b5a413dea2",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Failed: isbn null",
              "fullTitle": "Test Delete a Book Failed: isbn null",
              "timedOut": false,
              "duration": 2135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "fbf44d8d-a05a-4f72-8896-e7fb2ef966fa",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: user id null",
              "fullTitle": "Test Delete a Book Failed: user id null",
              "timedOut": false,
              "duration": 2754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "9d42eced-188b-4251-8c76-d8f1c6e53853",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: random user id value",
              "fullTitle": "Test Delete a Book Failed: random user id value",
              "timedOut": false,
              "duration": 741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "149df6d2-e625-413b-b1a0-88d5ca66bada",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: random isbn value",
              "fullTitle": "Test Delete a Book Failed: random isbn value",
              "timedOut": false,
              "duration": 867,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equals(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "6a03bbab-8c05-4bac-ad17-5b5fcfdb385a",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete a book",
              "fullTitle": "Test Delete a Book Success delete a book",
              "timedOut": false,
              "duration": 1166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(token, { isbn : isbn }, \n    (err, res) => {\n        expect(res.status).to.equals(204);\n        done();\n})",
              "err": {},
              "uuid": "d613f699-fd2e-4f35-b592-9858a384d275",
              "parentUUID": "9ea9e0df-67e7-41d6-bc97-dbd333ab4eb1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fbf44d8d-a05a-4f72-8896-e7fb2ef966fa",
            "9d42eced-188b-4251-8c76-d8f1c6e53853",
            "149df6d2-e625-413b-b1a0-88d5ca66bada",
            "6a03bbab-8c05-4bac-ad17-5b5fcfdb385a",
            "d613f699-fd2e-4f35-b592-9858a384d275"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7663,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
          "title": "Test Edit ISBN Book",
          "fullFile": "C:\\Aisyah\\QA\\try-npm\\runner\\regression.js",
          "file": "\\runner\\regression.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get token in \"Test Edit ISBN Book\"",
              "fullTitle": "Test Edit ISBN Book \"before all\" hook: Get token in \"Test Edit ISBN Book\"",
              "timedOut": false,
              "duration": 1200,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesLogin().request(\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        token = res.body.token;\n        done();\n    }\n)",
              "err": {},
              "uuid": "ea2b89ae-8fee-494a-abdc-bb57c39198c5",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Delete books in \"Test Edit ISBN Book\"",
              "fullTitle": "Test Edit ISBN Book \"before all\" hook: Delete books in \"Test Edit ISBN Book\"",
              "timedOut": false,
              "duration": 1490,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesDeleteBook().requestDefault(token,\n    (err, res) => {\n        expect(res.status).to.equals(204);\n        done();\n    }\n)",
              "err": {},
              "uuid": "d2f35367-5d5d-4cc2-86f0-f4cbb7607993",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Get isbn in \"Test Edit ISBN Book\"",
              "fullTitle": "Test Edit ISBN Book \"before all\" hook: Get isbn in \"Test Edit ISBN Book\"",
              "timedOut": false,
              "duration": 4915,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetBooks().request(\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        isbn = res.body.books[0].isbn\n        isbn2 = res.body.books[1].isbn\n        done();\n    }\n)",
              "err": {},
              "uuid": "e11056e9-7d1a-4581-8583-3ab3f8283009",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: Create books in \"Test Edit ISBN Book\"",
              "fullTitle": "Test Edit ISBN Book \"before all\" hook: Create books in \"Test Edit ISBN Book\"",
              "timedOut": false,
              "duration": 3354,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesCreateBook().request(token, { isbn: isbn },\n    (err, res) => {\n        expect(res.status).to.equals(201);\n        done();\n    }\n)",
              "err": {},
              "uuid": "96a23656-3125-4945-89f9-f7ae71326c18",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Validate the edited book is saved in \"Test Edit ISBN Book\"",
              "fullTitle": "Test Edit ISBN Book \"after all\" hook: Validate the edited book is saved in \"Test Edit ISBN Book\"",
              "timedOut": false,
              "duration": 868,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pagesGetDetailUser().request(userId, token,\n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(new helper().getValues(res, 'books.isbn')).to.not.contain(isbn)\n        expect(new helper().getValues(res, 'books.isbn')).to.contain(isbn2)\n        done();\n    }\n)",
              "err": {},
              "uuid": "1778113e-47bc-4b3d-8879-6cc44cdd16e0",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Failed: user id invalid",
              "fullTitle": "Test Edit ISBN Book Failed: user id invalid",
              "timedOut": false,
              "duration": 3894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(isbn, token, datas.ddt, \n    (err, res) => {\n        expect(res.status).to.equals(datas.response.status);\n        expect(res.body.message).to.equal(datas.response.message);\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "fc0d4a6c-1744-4e16-8c2f-9d75abf6f66d",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: invalid isbn that want to be edited",
              "fullTitle": "Test Edit ISBN Book Failed: invalid isbn that want to be edited",
              "timedOut": false,
              "duration": 2090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request('aaaa', token, {isbn: isbn}, \n    (err, res) => {\n        expect(res.status).to.equals(400);\n        expect(res.body.message).to.equal('ISBN supplied is not available in User\\'s Collection!');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "19eca3db-19c6-4d2b-86a9-0bb7a6d12468",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: invalid token",
              "fullTitle": "Test Edit ISBN Book Failed: invalid token",
              "timedOut": false,
              "duration": 791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(isbn, 'aaaa', {isbn: isbn}, \n    (err, res) => {\n        expect(res.status).to.equals(401);\n        expect(res.body.message).to.equal('User not authorized!');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "91d7e12b-69ad-435c-900b-b44bd9874a34",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed: invalid new isbn",
              "fullTitle": "Test Edit ISBN Book Failed: invalid new isbn",
              "timedOut": false,
              "duration": 848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(isbn, token, {isbn: isbn}, \n    (err, res) => {\n        expect(res.status).to.equals(400);\n        expect(res.body.message).to.equal('ISBN supplied is not available in User\\'s Collection!');\n        expect(res.body).to.be.jsonSchema(new pages().expect('failed'))\n        done();\n})",
              "err": {},
              "uuid": "ad795173-20d2-4d92-8d69-ff1dda93ab40",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success edit isbn book",
              "fullTitle": "Test Edit ISBN Book Success edit isbn book",
              "timedOut": false,
              "duration": 7043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "new pages().request(isbn, token, {isbn: isbn2}, \n    (err, res) => {\n        expect(res.status).to.equals(200);\n        expect(res.body.books[0].isbn).to.equal(isbn2);\n        expect(res.body).to.be.jsonSchema(new pages().expect('success'))\n        done();\n})",
              "err": {},
              "uuid": "f0b09c52-f0e0-45b0-8653-30404bb0a7dc",
              "parentUUID": "d3e0a9cb-a6f8-43bc-b528-b5f784dead24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc0d4a6c-1744-4e16-8c2f-9d75abf6f66d",
            "19eca3db-19c6-4d2b-86a9-0bb7a6d12468",
            "91d7e12b-69ad-435c-900b-b44bd9874a34",
            "ad795173-20d2-4d92-8d69-ff1dda93ab40",
            "f0b09c52-f0e0-45b0-8653-30404bb0a7dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14666,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}